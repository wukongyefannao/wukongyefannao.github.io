<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>悟空也烦恼的博客</title><link>https://wukongyefannao.github.io</link><description>于大爷工具集  -   www.yudaye.site   - QQ:6686496</description><copyright>悟空也烦恼的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://wukongyefannao.github.io</link></image><lastBuildDate>Tue, 09 Sep 2025 10:22:01 +0000</lastBuildDate><managingEditor>悟空也烦恼的博客</managingEditor><ttl>60</ttl><webMaster>悟空也烦恼的博客</webMaster><item><title>MongoREST - Instant REST API for MongoDB Single-File Solution. Zero Code. Full Power</title><link>https://wukongyefannao.github.io/post/MongoREST%20-%20Instant%20REST%20API%20for%20MongoDB%20Single-File%20Solution.%20Zero%20Code.%20Full%20Power.html</link><description>
 Developers! Struggling with MongoDB ops? My new Binary REST Tool lets you build a full REST API in seconds – zero code, cross-platform, faster than scripts! Supports regex queries, bulk updates, everything MongoDB. Check it out on [Gumroad](https://yudaye.gumroad.com/l/mongorest) #MongoDB #DevTools #NoCode

# MongoRest (English User Manual)

A minimal, single-file RESTful API gateway that lets you talk to MongoDB over HTTP instantly — zero coding required.

## Why MongoRest?
✅ **Zero-code**: download, config, run.  
✅ **Full-featured**: `find`, `insert`, `update`, `delete`, `aggregate`, `bulkWrite` … all ready.  
✅ **Rich query syntax**: `$regex`, `$oid`, projection, sort, collation … everything MongoDB supports.  
✅ **Bulk operations**: complex multi-doc updates in one call.  
✅ **Single executable**: no dependencies, cross-platform (Windows, Linux, macOS).  
✅ **Freedom &amp; efficiency**: freer than cloud Data-API, faster than hand-written scripts.  
✅ **Secure**: connection string via config file or environment variable only.

&lt;img width='1356' height='402' alt='Image' src='https://github.com/user-attachments/assets/ce6cf4e9-7e39-4d6b-a0e3-230e2201b1c6' /&gt;

## Quick Start

1. **Purchase &amp; download**  
   Grab the platform archive from [Gumroad](https://yudaye.gumroad.com/l/mongorest) and unzip.

2. **Edit `app.conf` (same folder)**  
   ```
   db.mongo.datasource = mongodb://USER:PASS@HOST:PORT
   # logging (optional)
   log.file = on
   # port (optional, default 8081)
   httpport = 8888
   ```

3. **Run**
   - Windows: double-click `mongorest-windows.exe`  
   - Linux / macOS: `chmod +x mongorest-linux &amp;&amp; ./mongorest-linux`

4. **Test**  
   ```
   curl 'http://localhost:8081/mongo?action=find&amp;db=sample_mflix&amp;collection=users&amp;limit=2'
   ```


## Base URL &amp; Method
Gateway address ：`http://your_server_ip:port/mongo?`
Supported verbs:`get`、`post`
get url demo：`http://your_server_ip:port/mongo?action=find&amp;db=mydb&amp;collection=mycolleciton`
post url demo：`curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' -H 'Cache-Control: no-cache' -H 'Postman-Token: ebad650a-e52f-656f-7c91-8cda14df5cae' -d 'action=find&amp;collection=users&amp;db=sample_mflix&amp;limit=2&amp;filter={}' 'http://localhost:8081/mongo'`


## Universal Parameters


| Param       | Required | Description | Example |
|-------------|----------|-------------|---------|
| `action`    | **yes**  | Operation name | `find`, `count`, `updateMany`, `deleteMany`, `aggregate`, `bulkWrite` … |
| `db`        | **yes**  | Database name | `sample_mflix` |
| `collection`| **yes**  | Collection name | `users` |
| `filter`    | no       | MongoDB query doc (JSON string) | `{'age':{'$gte':18}}` |
| `projection`| no       | Field projection (0=hide, 1=show) | `{'_id':0,'name':1}` |
| `sort`      | no       | Sort rules (1=asc, -1=desc) | `{'name':1,'age':-1}` |
| `limit`     | no       | Max docs per call (≤10 000) | `20` |
| `index`     | no       | Page index, start at 0 | `3` |
| `collation` | no       | Collation settings | `{'locale':'zh'}` |
| `upset`     | no       | Upsert flag (any value) | `upset=1` |

---

### Action Guide

#### 1. Find

*   **Action**: `find`
*   **Demo**:
*   **simple query**: `http://localhost:8081/mongo?action=find&amp;collection=users&amp;db=sample_mflix&amp;limit=2&amp;filter={}`
```json
[
  {
    '_id': '59b99db4cfa9a34dcd7885b7',
    'email': 'mark_addy@gameofthron.es',
    'name': 'Robert Baratheon',
    'password': '$2b$12$yGqxLG9LZpXA2xVDhuPnSOZd.VURVkz7wgOLY3pnO0s7u2S1ZO32y'
  },
  {
    '_id': '59b99db6cfa9a34dcd7885ba',
    'email': 'lena_headey@gameofthron.es',
    'name': 'Cersei Lannister',
    'password': '$2b$12$FExjgr7CLhNCa.oUsB9seub8mqcHzkJCFZ8heMc8CeIKOZfeTKP8m'
  }
]
```

*   **Regex search**: `localhost:8081/mongo?action=find&amp;collection=users&amp;db=sample_mflix&amp;limit=2&amp;filter={'name':{'$regex':'R'}}` 
 ```json
[
  {
    '_id': '59b99db4cfa9a34dcd7885b7',
    'email': 'mark_addy@gameofthron.es',
    'name': 'Robert Baratheon',
    'password': '$2b$12$yGqxLG9LZpXA2xVDhuPnSOZd.VURVkz7wgOLY3pnO0s7u2S1ZO32y'
  },
  {
    '_id': '59b99dbacfa9a34dcd7885c2',
    'email': 'richard_madden@gameofthron.es',
    'name': 'Robb Stark',
    'password': '$2b$12$XPLvWQW7tjWc/PX9jMVRnO8w.lR6hv144ee8pc8nDsWIAWxfwxHzy'
  }
]
  ```
*   **By ObjectId**: `localhost:8081/mongo?action=find&amp;collection=users&amp;db=sample_mflix&amp;limit=2&amp;filter={'_id':{'$oid':'59b99dbacfa9a34dcd7885c2'}}`
```json
[
  {
    '_id': '59b99dbacfa9a34dcd7885c2',
    'email': 'richard_madden@gameofthron.es',
    'name': 'Robb Stark',
    'password': '$2b$12$XPLvWQW7tjWc/PX9jMVRnO8w.lR6hv144ee8pc8nDsWIAWxfwxHzy'
  }
] 
   ```
 
  
*   **Projection (only return _id &amp; email)**: `localhost:8081/mongo?action=find&amp;collection=users&amp;db=sample_mflix&amp;limit=2&amp;filter={'_id':{'$oid':'59b99dbacfa9a34dcd7885c2'}}&amp;projection={'_id':true,'email':true}`
*   **Projection (clear _id)**: `localhost:8081/mongo?action=find&amp;collection=users&amp;db=sample_mflix&amp;limit=2&amp;filter={'_id':{'$oid':'59b99dbacfa9a34dcd7885c2'}}&amp;projection={'_id':false}`
*   **Sorting (name ASC, email DESC)**: `localhost:8081/mongo?action=find&amp;collection=users&amp;db=sample_mflix&amp;limit=5&amp;sort={'name':1,'email':-1}`
*  **Count only**: `localhost:8081/mongo?action=count&amp;collection=users&amp;db=sample_mflix`
```json
{'count':185}
  ```

#### 2. Update

*   **Action**: `updateMany、findOneAndUpdate`
*   **Parameter**: `update` (json string)
*   **Demo**:
*   **Deep update**: `?action=updateMany&amp;db=other&amp;collection=tudi&amp;filter={'tudi.name':'2222'}&amp;update={'$set':{'tudi.$.status':'1'}}`

*    **findOneAndUpdate **: `localhost:8081/mongo?action=findOneAndUpdate&amp;collection=users&amp;db=sample_mflix&amp;filter={'_id':{'$oid':'59b99dbacfa9a34dcd7885c2'}}&amp;update={'$set':{'name':'11'}}`
*  ***if update success,return updated document***: 
 ```json
{
  '_id': '59b99dbacfa9a34dcd7885c2',
  'email': 'richard_madden@gameofthron.es',
  'name': '11',
  'password': '$2b$12$XPLvWQW7tjWc/PX9jMVRnO8w.lR6hv144ee8pc8nDsWIAWxfwxHzy'
}
   ```
*  ***if update failed,return count document***: 
 ```json
{'MatchedCount':0,'ModifiedCount':0,'UpsertedCount':0}
   ```
*    **upset更新 **: `localhost:8081/mongo?action=updateMany&amp;collection=users&amp;db=sample_mflix&amp;update={'$set':{'name':'999'}}&amp;filter={'name':'2342342342'}&amp;upset=1`
*  ***UpsertedCount is one，mean upset 1 row***: 
 ```json
{
  'MatchedCount': 0,
  'ModifiedCount': 0,
  'UpsertedCount': 1
}
   ```


#### 3. Insert

*   **Action**: `insertMany`
*   **Parameter**: `insert` (JSON list string)
*   **Demo**: `localhost:8081/mongo?action=insertMany&amp;collection=users&amp;db=sample_mflix&amp;insert=[{'name':'01','user':'17','pwd':'01-17'}]`
```json
{'InsertedCount':1}
```

#### 4. Delete

*   **Action**: `deleteMany`
*   **Demo**:
`localhost:8081/mongo?action=deleteMany&amp;collection=users&amp;db=sample_mflix&amp;filter={'name':'01'}`
```json
{'DeletedCount':1}
```
#### 5. Aggregate

*   **Action**: `aggregate`
*   **Parameter**: `filter` 
*   **Demo**:
`?action=aggregate&amp;db=dbname&amp;collection=domains&amp;filter=[{'$group': {'_id': '$title', 'count': {'$sum': 1}}}]`

#### 6. Bulk Write - **High level function**

*   **Action**: `bulkWrite`
*   **Parameter**: `updates` (use split `&gt;-&lt;` and `&lt;-&gt;`)
*   **Syntax**: `{filter1}&gt;-&lt;{update1}&lt;-&gt;{filter2}&gt;-&lt;{update2}`
*   **Demo**:
`#localhost:8081/mongo?action=bulkWrite&amp;db=sample_mflix&amp;collection=users&amp;updates={'name':'Ned%20Stark'}&gt;-&lt;{'$set':{'password':'ggg111'}}&lt;-&gt;{'name':'Robert%20Baratheon'}&gt;-&lt;{'$set':{'password':'ggg222'}}`
```json
{
  'MatchedCount': 2,
  'ModifiedCount': 2,
  'UpsertedCount': 0,
  'UpsertedIDs': {

  },
  'code': 200,
  'msg': 'success'
}
```


## Security &amp; Configuration
- **NEVER expose the service to the public internet** — use inside trusted networks only.  
- Store connection string in `app.conf` (same folder):
* datasource**:
`db.mongo.datasource=mongodb://{your_mongodb_user}:{password}@{ip_or_domain}:{port}`
*   **LocalHost Demo**:
`db.mongo.datasource=mongodb://yuhanger:867983@localhost:27017`
*   **RemoteIPDemo**:
`db.mongo.datasource=mongodb://yuhanger:867983@10.10.10.10:27017`
*   **MongoDB AtlasDemo**:
`db.mongo.datasource=db.mongo.datasource=mongodb+srv://user:password@cluster0.jmaxghd.mongodb.net/?retryWrites=true&amp;w=majority&amp;appName=Cluster0`


## Logging
- Logs are written to `logs/` folder when `log.file=on` is set in `app.conf`.   
```
2025/09/04 20:26:49.050 [I] [util.go:136]  -------requestInfo-----------  
2025/09/04 20:26:49.050 [I] [util.go:137]  request path: /mongo  
2025/09/04 20:26:49.050 [I] [util.go:138]  client ip: [::1]  
2025/09/04 20:26:49.050 [I] [util.go:139]  action: updateMany  
2025/09/04 20:26:49.050 [I] [util.go:140]  db: sample_mflix  
2025/09/04 20:26:49.050 [I] [util.go:141]  collection: users  
2025/09/04 20:26:49.050 [I] [util.go:142]  filter: {'name':'2342342342'}  
2025/09/04 20:26:49.050 [I] [util.go:143]  update: {'$set':{'name':'999'}}  
2025/09/04 20:26:49.050 [I] [util.go:144]  updates:   
2025/09/04 20:26:49.050 [I] [util.go:145]  projection: {}  
2025/09/04 20:26:49.050 [I] [util.go:146]  limit: 10000  
2025/09/04 20:26:49.050 [I] [util.go:147]  index: 0  
2025/09/04 20:26:49.050 [I] [util.go:148]  key:   
2025/09/04 20:26:49.050 [I] [util.go:149]  sort:   
2025/09/04 20:26:49.050 [I] [util.go:150]  collation:   
2025/09/04 20:26:49.050 [I] [util.go:151]  upset: 1  
2025/09/04 20:26:49.050 [I] [util.go:152]  retdoc:    
2025/09/04 20:26:49.050 [I] [util.go:153]  bulk-upsets:   
2025/09/04 20:26:49.050 [I] [util.go:154]  -------requestInfo-----------
```

## 💰Licensing &amp; Purchase
- Buy once on [Gumroad](https://yudaye.gumroad.com/l/mongorest) and get lifetime access.  
- **FREE tier**: read-only operations (`find` / `count`) only.  
- **FULL tier**: unlocks all actions — see comparison table on Gumroad.

## Contact
```
GMail: yuhang19890101@gmail.com
QQ   : 6686496
X      :      https://x.com/lazyisfast
```。</description><guid isPermaLink="true">https://wukongyefannao.github.io/post/MongoREST%20-%20Instant%20REST%20API%20for%20MongoDB%20Single-File%20Solution.%20Zero%20Code.%20Full%20Power.html</guid><pubDate>Tue, 09 Sep 2025 10:21:28 +0000</pubDate></item><item><title>于大爷.在线工具集-9级Word标题一键生成！自己怒写“word带9级标题格式的多级编号在线自动生成工具”，彻底解决word多级编号痛点</title><link>https://wukongyefannao.github.io/post/yu-da-ye-.-zai-xian-gong-ju-ji--9-ji-Word-biao-ti-yi-jian-sheng-cheng-%EF%BC%81-zi-ji-nu-xie-%E2%80%9Cword-dai-9-ji-biao-ti-ge-shi-de-duo-ji-bian-hao-zai-xian-zi-dong-sheng-cheng-gong-ju-%E2%80%9D%EF%BC%8C-che-di-jie-jue-word-duo-ji-bian-hao-tong-dian.html</link><description>
![在这里插入图片描述](https://i-blog.csdnimg.cn/direct/0a76fe400e46471c8594efc5c326558a.png)


&gt; ✨ **无需复杂设置 | 9级标题自动编号 | 多种模板可选 | 直接下载使用 | 永久免费**

## 一、痛点暴击：你还在为Word多级标题编号烦恼吗？

- ❌ 手动设置多级标题格式耗时耗力
- ❌ 编号层级混乱，调整困难
- ❌ 不同文档格式不统一
- ❌ 多级标题样式难以自定义
- ❌ 重复工作效率低下

## 二、拯救方案：Word标题格式自动生成工具
**👉 直达链接：&lt;https://www.yudaye.site/docx_title_generator&gt;**  
（手机/电脑免登录直接使用）

### 2.1 核心功能一览
- ✅ 9级标题自动编号：完美支持Word各级标题格式
- ✅ 多种模板可选：提供6种常用多级编号样式
- ✅ 实时预览：直观查看标题层级结构
- ✅ 一键生成：输入标题文本，即刻生成完整文档
- ✅ 直接下载：生成后可立即下载使用
- 最后生成的word，嘎嘎好，如下图：
![在这里插入图片描述](https://i-blog.csdnimg.cn/direct/99de5a58e68742018c26308b85bc29b1.png)


### 2.2 技术特点
- 🚀 基于Streamlit + python-docx开发
- 🔒 全程本地处理，数据安全无忧
- 🎨 内置多种专业模板，满足不同场景需求
- 📱 移动端友好，随时随地使用
- ⚡ 毫秒级生成，高效便捷

## 三、核心代码展示

### 3.1 基础配置与界面搭建
```python
import streamlit as st
from docx import Document
import io
import os

# 设置页面配置
st.set_page_config(
    page_title='word带9级标题格式的多级编号在线自动生成工具',
    page_icon='📝',
    layout='centered',
    initial_sidebar_state='collapsed'
)

# 定义标题模板字典
titleDict={
    '(一)1(1)圈1半1A.a.a)i.':'''\n        (一)\n            1\n                (1)\n                    ➀\n                        1)\n                            A.\n                                a.\n                                    a)\n                                        i.\n    ''',
    # 其他模板...
}

# 标题和介绍
st.title('📝 word带9级标题格式的多级编号在线自动生成工具')
st.markdown('通过选择不同的多级编号格式模板，快速生成带编号带标题格式的Word标题文档，直接下载使用，再也不用麻烦多级编号的问题。</description><guid isPermaLink="true">https://wukongyefannao.github.io/post/yu-da-ye-.-zai-xian-gong-ju-ji--9-ji-Word-biao-ti-yi-jian-sheng-cheng-%EF%BC%81-zi-ji-nu-xie-%E2%80%9Cword-dai-9-ji-biao-ti-ge-shi-de-duo-ji-bian-hao-zai-xian-zi-dong-sheng-cheng-gong-ju-%E2%80%9D%EF%BC%8C-che-di-jie-jue-word-duo-ji-bian-hao-tong-dian.html</guid><pubDate>Wed, 20 Aug 2025 03:03:41 +0000</pubDate></item><item><title>一键分析文本相似度！我用Streamlit开发了一个智能文本对比神器，于大爷.在线工具集</title><link>https://wukongyefannao.github.io/post/yi-jian-fen-xi-wen-ben-xiang-si-du-%EF%BC%81-wo-yong-Streamlit-kai-fa-le-yi-ge-zhi-neng-wen-ben-dui-bi-shen-qi-%EF%BC%8C-yu-da-ye-.-zai-xian-gong-ju-ji.html</link><description># 一键分析文本相似度！我用Streamlit开发了一个智能文本对比神器，于大爷.在线工具集

![于大爷.在线工具集，文本相似性分析](https://i-blog.csdnimg.cn/direct/813f8dabef024d3c868ac47c4fd86163.png)


&gt; ✨ **在线秒算 | 多维分析 | 精准对比 | 支持中英文**

## 一、痛点暴击：你是否遇到过这些困扰？
- ❌ 手动逐字对比文本，费时费力还容易出错
- ❌ 抄袭检测工具收费太贵，小项目用不起
- ❌ 简单的文本对比工具无法给出详细分析
- ❌ 现有工具要么太简陋，要么太复杂

## 二、解决方案：智能文本相似度分析工具
**👉 在线体验：&lt;https://yudaye.site/txt_compare&gt;**  
（免登录，电脑手机都能用）

### 2.1 核心特性
- 🚀 6种专业算法，多维度分析相似度
- 💫 可视化展示，结果一目了然
- ⚡️ 毫秒级响应，支持1000字符以内文本
- 🌈 中英文混合支持，通用性强
- 🎯 详细的算法说明，助你选择合适指标

### 2.2 技术实现
整个工具基于Streamlit + textdistance库开发，核心代码非常简洁：

```python
import streamlit as st
import textdistance

# 1. 界面布局
col1, col2 = st.columns(2)
with col1:
    text1 = st.text_area('📝 文本 1', height=150)
with col2:
    text2 = st.text_area('📝 文本 2', height=150)

# 2. 相似度计算
if st.button('🔍 开始分析'):
    # Levenshtein距离
    lev = textdistance.levenshtein(text1, text2)
    st.metric('Levenshtein距离', f'{lev:.4f}', '越小越相似')
    
    # Cosine相似度
    cos = textdistance.cosine(text1, text2)
    st.metric('Cosine相似度', f'{cos:.4f}', '越大越相似')
    
    # 更多算法...
```

### 2.3 完整实现
这里展示一些关键代码片段：

1. 页面样式设置：
```python
st.markdown('''
    &lt;style&gt;
    .stButton &gt; button {
        width: 100%;
        padding: 12px 20px;
        border-radius: 8px;
        background: linear-gradient(to right, #9b59b6, #b39ddb);
        color: white;
        font-weight: 600;
        transition: all 0.3s ease;
    }
    
    .stButton &gt; button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 8px rgba(52, 152, 219, 0.3);
    }
    &lt;/style&gt;
''', unsafe_allow_html=True)
```

2. 多算法实现：
```python
# 使用tabs组织结果展示
tab1, tab2 = st.tabs(['📊 计算结果', 'ℹ️ 详细说明'])

with tab1:
    # 展示距离计算结果
    metric_col1, metric_col2, metric_col3 = st.columns(3)
    
    with metric_col1:
        lev = textdistance.levenshtein(text1, text2)
        st.metric(
            label='Levenshtein距离',
            value=f'{lev:.4f}',
            delta='越小越相似'
        )
    
    with metric_col2:
        ham = textdistance.hamming(text1, text2)
        st.metric(
            label='Hamming距离', 
            value=f'{ham:.4f}',
            delta='越小越相似'
        )
```

3. 算法说明展示：
```python
with tab2:
    st.markdown('''
    ### 距离指标说明
    - **Levenshtein距离**: 计算将一个字符串转换为另一个字符串所需的最小编辑次数
    - **Hamming距离**: 计算两个等长字符串对应位置上不同字符的数量
    - **Cosine相似度**: 将文本转换为向量，计算向量夹角的余弦值
    ''')
```

## 三、应用场景
1. 📚 论文查重初筛
2. 📝 文案相似度对比
3. 🔍 简单抄袭检测
4. 📊 文本差异分析
5. 🎯 关键词匹配度检查

## 四、使用效果
实际使用效果非常直观：
1. 输入两段文本
2. 点击'开始分析'
3. 立即获得6种算法的相似度分析结果
4. 查看详细说明，选择最适合的指标

## 五、项目亮点
1. 🎨 界面设计
   - 简洁直观的双栏布局
   - 渐变色按钮增强交互体验
   - 结果展示清晰明了

2. 🛠 技术特色
   - 使用textdistance库，支持多种算法
   - Streamlit实现快速部署
   - 优化的用户交互体验

3. 💡 创新点
   - 多算法对比分析
   - 详细的算法说明
   - 精美的可视化展示

## 六、未来规划
1. 📈 支持更多相似度算法
2. 🎯 添加批量文本对比功能
3. 📊 增加差异可视化展示
4. 🚀 优化大文本处理性能

## 八、作者信息
- 📧 邮箱：6686496@qq.com
- 🌐 主页：https://yudaye.site

&gt; 如果这个工具对你有帮助，欢迎点赞转发！也欢迎在评论区提出你的建议！。</description><guid isPermaLink="true">https://wukongyefannao.github.io/post/yi-jian-fen-xi-wen-ben-xiang-si-du-%EF%BC%81-wo-yong-Streamlit-kai-fa-le-yi-ge-zhi-neng-wen-ben-dui-bi-shen-qi-%EF%BC%8C-yu-da-ye-.-zai-xian-gong-ju-ji.html</guid><pubDate>Mon, 30 Jun 2025 03:32:27 +0000</pubDate></item><item><title>于大爷-Excel合并单元格拆分工具</title><link>https://wukongyefannao.github.io/post/yu-da-ye--Excel-he-bing-dan-yuan-ge-chai-fen-gong-ju.html</link><description># Excel合并单元格拆分工具 - 企业级解决方案

## 🌟 产品概述
Excel合并单元格拆分工具是一款专为企业数据处理设计的效率工具，能够一键拆分Excel文件中的所有合并单元格并自动填充原始数据，解决因合并单元格导致的数据分析障碍。</description><guid isPermaLink="true">https://wukongyefannao.github.io/post/yu-da-ye--Excel-he-bing-dan-yuan-ge-chai-fen-gong-ju.html</guid><pubDate>Thu, 05 Jun 2025 15:40:26 +0000</pubDate></item><item><title>于大爷在线数据库客户端 (MySQL · PostgreSQL · SQL Server · SQLite)</title><link>https://wukongyefannao.github.io/post/yu-da-ye-zai-xian-shu-ju-ku-ke-hu-duan-%20%28MySQL%20%C2%B7%20PostgreSQL%20%C2%B7%20SQL%20Server%20%C2%B7%20SQLite%29.html</link><description># 🚀 在线数据库客户端 (MySQL · PostgreSQL · SQL Server · SQLite)

&gt; 企业级 · 安全 · 高效 · 零安装

---

## 🏷️ 产品简介

**在线数据库客户端**是一款面向企业级用户的多数据库在线连接与查询平台。</description><guid isPermaLink="true">https://wukongyefannao.github.io/post/yu-da-ye-zai-xian-shu-ju-ku-ke-hu-duan-%20%28MySQL%20%C2%B7%20PostgreSQL%20%C2%B7%20SQL%20Server%20%C2%B7%20SQLite%29.html</guid><pubDate>Sun, 25 May 2025 07:24:13 +0000</pubDate></item><item><title>于大爷在线json多层次比较工具</title><link>https://wukongyefannao.github.io/post/yu-da-ye-zai-xian-json-duo-ceng-ci-bi-jiao-gong-ju.html</link><description># 🔍 JSON 对比工具 - 专业级JSON差异分析解决方案

![JSON对比工具界面](https://via.placeholder.com/800x400?text=JSON+对比工具截图)

## 🌟 产品简介
**JSON对比工具** 是一款专为开发者和数据分析师设计的在线工具，能够快速准确地比较两个JSON文件或文本内容的结构差异和数据变更。</description><guid isPermaLink="true">https://wukongyefannao.github.io/post/yu-da-ye-zai-xian-json-duo-ceng-ci-bi-jiao-gong-ju.html</guid><pubDate>Thu, 22 May 2025 15:52:30 +0000</pubDate></item><item><title>于大爷在线CSV、Excel(xlsx/xls)和JSON格式转换工具</title><link>https://wukongyefannao.github.io/post/yu-da-ye-zai-xian-CSV%E3%80%81Excel%28xlsx-xls%29-he-JSON-ge-shi-zhuan-huan-gong-ju.html</link><description># 📊 文件格式转换工具 - 高效处理数据格式转换

## 产品简介

文件格式转换工具是一款在线数据格式转换应用，支持CSV、Excel和JSON格式之间的相互转换。</description><guid isPermaLink="true">https://wukongyefannao.github.io/post/yu-da-ye-zai-xian-CSV%E3%80%81Excel%28xlsx-xls%29-he-JSON-ge-shi-zhuan-huan-gong-ju.html</guid><pubDate>Wed, 21 May 2025 07:18:57 +0000</pubDate></item><item><title>于大爷在线SSH管理工具</title><link>https://wukongyefannao.github.io/post/yu-da-ye-zai-xian-SSH-guan-li-gong-ju.html</link><description># 🔌 于大爷在线SSH管理工具

​**安全高效的远程服务器管理解决方案**​  
👉 [立即使用](https://www.yudaye.site/ssh)  

## 🌟 核心功能

### 🚀 三合一远程管理
| 功能模块       | 特色亮点                                                                 |
|----------------|--------------------------------------------------------------------------|
| ​**📤 文件上传**​ | 简单文件上传                             |
| ​**📥 文件下载**​ | 智能文件预览（CSV/Excel自动表格化），100MB大文件支持，下载限速保护        |
| ​**⌨️ 命令执行**​ | 多命令批量执行，实时返回结果，支持PTY终端模拟                            |

### 🔒 企业级安全特性
```python
# 采用军工级加密协议
import paramiko
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())  # 自动信任新主机密钥。</description><guid isPermaLink="true">https://wukongyefannao.github.io/post/yu-da-ye-zai-xian-SSH-guan-li-gong-ju.html</guid><pubDate>Mon, 19 May 2025 14:30:45 +0000</pubDate></item><item><title>于大爷在线时间戳转换工具</title><link>https://wukongyefannao.github.io/post/yu-da-ye-zai-xian-shi-jian-chuo-zhuan-huan-gong-ju.html</link><description># ⏱️ 于大爷在线时间戳转换工具

​**开发者必备的时间格式转换神器**​  
👉 [立即使用](https://www.yudaye.site/)  

## 🔥 核心功能亮点

### 1. 双向智能转换
- ​**时间戳 → 可读时间**​  
  支持10位（秒级），自动识别时区
- ​**可读时间 → 时间戳**​  
  支持日期选择器+时间微调组件，精确到秒级转换

### 2. 全球时区覆盖
- 内置**400+时区数据库**​（基于zoneinfo）
- 默认智能推荐`Asia/Shanghai`和`UTC`
- 支持所有IANA时区标准（如`America/New_York`）

### 3. 极简交互设计
- 一键获取当前时间戳（'当前时间'按钮）
- 双击结果框自动复制内容
- 响应式布局适配手机/电脑

## 🛠️ 技术优势
```python
# 使用Python标准库确保精度
from datetime import datetime
from zoneinfo import ZoneInfo  # 时区处理无误差。</description><guid isPermaLink="true">https://wukongyefannao.github.io/post/yu-da-ye-zai-xian-shi-jian-chuo-zhuan-huan-gong-ju.html</guid><pubDate>Mon, 19 May 2025 14:18:23 +0000</pubDate></item></channel></rss>